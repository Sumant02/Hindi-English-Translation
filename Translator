{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyM15sh74FM7XS6OdQKUVkd+"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","source":["!pip install transformers"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VDRB1R-i-vBc","executionInfo":{"status":"ok","timestamp":1717513145618,"user_tz":-330,"elapsed":5856,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}},"outputId":"1c0232e9-fb31-4e6f-83a1-8f0b1b488ac4"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: transformers in /usr/local/lib/python3.10/dist-packages (4.41.1)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from transformers) (3.14.0)\n","Requirement already satisfied: huggingface-hub<1.0,>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.23.2)\n","Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.10/dist-packages (from transformers) (1.25.2)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from transformers) (24.0)\n","Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from transformers) (6.0.1)\n","Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.10/dist-packages (from transformers) (2024.5.15)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from transformers) (2.31.0)\n","Requirement already satisfied: tokenizers<0.20,>=0.19 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.19.1)\n","Requirement already satisfied: safetensors>=0.4.1 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.4.3)\n","Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.10/dist-packages (from transformers) (4.66.4)\n","Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.23.0->transformers) (2023.6.0)\n","Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.23.0->transformers) (4.12.0)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (3.7)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (2024.2.2)\n"]}]},{"cell_type":"code","source":["'''import transformers\n","\n","# Load the pre-trained transformer model\n","model = transformers.T5ForConditionalGeneration.from_pretrained(\"google/t5-v1.1-base\")\n","\n","# Define the source and target languages\n","source_language = \"en\"\n","target_language = \"mr\"\n","\n","# Translate the text\n","def translate(text):\n","    translated_text = model.generate(\n","        input_ids=transformers.AutoTokenizer.from_pretrained(model).encode(\n","            f\"translate {source_language} to {target_language}: {text}\",\n","            return_tensors=\"pt\",\n","        ),\n","        max_length=512,\n","        num_beams=5,\n","    )\n","\n","    return translated_text[0].decode(\"utf-8\")\n","\n","# Translate a sentence from English to Marathi\n","translated_sentence = translate(\"Hello, world!\")\n","\n","# Print the translated sentence\n","print(translated_sentence)'''"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":754},"id":"QdCBiFT--i8u","executionInfo":{"status":"error","timestamp":1717513150216,"user_tz":-330,"elapsed":4601,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}},"outputId":"5ddec9c8-e56a-4e56-eea1-0763118a4051"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/huggingface_hub/utils/_token.py:89: UserWarning: \n","The secret `HF_TOKEN` does not exist in your Colab secrets.\n","To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n","You will be able to reuse this secret in all of your notebooks.\n","Please note that authentication is recommended but still optional to access public models or datasets.\n","  warnings.warn(\n"]},{"output_type":"error","ename":"OSError","evalue":"google/t5-v1.1-base is not a local folder and is not a valid model identifier listed on 'https://huggingface.co/models'\nIf this is a private repository, make sure to pass a token having permission to this repo either by logging in with `huggingface-cli login` or by passing `token=<your_token>`","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mHTTPError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/huggingface_hub/utils/_errors.py\u001b[0m in \u001b[0;36mhf_raise_for_status\u001b[0;34m(response, endpoint_name)\u001b[0m\n\u001b[1;32m    303\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 304\u001b[0;31m         \u001b[0mresponse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mraise_for_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    305\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mHTTPError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/requests/models.py\u001b[0m in \u001b[0;36mraise_for_status\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1020\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mhttp_error_msg\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1021\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mHTTPError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhttp_error_msg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1022\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mHTTPError\u001b[0m: 401 Client Error: Unauthorized for url: https://huggingface.co/google/t5-v1.1-base/resolve/main/config.json","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mRepositoryNotFoundError\u001b[0m                   Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/transformers/utils/hub.py\u001b[0m in \u001b[0;36mcached_file\u001b[0;34m(path_or_repo_id, filename, cache_dir, force_download, resume_download, proxies, token, revision, local_files_only, subfolder, repo_type, user_agent, _raise_exceptions_for_gated_repo, _raise_exceptions_for_missing_entries, _raise_exceptions_for_connection_errors, _commit_hash, **deprecated_kwargs)\u001b[0m\n\u001b[1;32m    398\u001b[0m         \u001b[0;31m# Load from URL or cache if already cached\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 399\u001b[0;31m         resolved_file = hf_hub_download(\n\u001b[0m\u001b[1;32m    400\u001b[0m             \u001b[0mpath_or_repo_id\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/huggingface_hub/utils/_validators.py\u001b[0m in \u001b[0;36m_inner_fn\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    113\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 114\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    115\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/huggingface_hub/file_download.py\u001b[0m in \u001b[0;36mhf_hub_download\u001b[0;34m(repo_id, filename, subfolder, repo_type, revision, library_name, library_version, cache_dir, local_dir, user_agent, force_download, proxies, etag_timeout, token, local_files_only, headers, endpoint, legacy_cache_layout, resume_download, force_filename, local_dir_use_symlinks)\u001b[0m\n\u001b[1;32m   1220\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1221\u001b[0;31m         return _hf_hub_download_to_cache_dir(\n\u001b[0m\u001b[1;32m   1222\u001b[0m             \u001b[0;31m# Destination\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/huggingface_hub/file_download.py\u001b[0m in \u001b[0;36m_hf_hub_download_to_cache_dir\u001b[0;34m(cache_dir, repo_id, filename, repo_type, revision, headers, proxies, etag_timeout, endpoint, local_files_only, force_download)\u001b[0m\n\u001b[1;32m   1324\u001b[0m         \u001b[0;31m# Otherwise, raise appropriate error\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1325\u001b[0;31m         \u001b[0m_raise_on_head_call_error\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhead_call_error\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mforce_download\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlocal_files_only\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1326\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/huggingface_hub/file_download.py\u001b[0m in \u001b[0;36m_raise_on_head_call_error\u001b[0;34m(head_call_error, force_download, local_files_only)\u001b[0m\n\u001b[1;32m   1822\u001b[0m         \u001b[0;31m# Repo not found or gated => let's raise the actual error\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1823\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mhead_call_error\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1824\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/huggingface_hub/file_download.py\u001b[0m in \u001b[0;36m_get_metadata_or_catch_error\u001b[0;34m(repo_id, filename, repo_type, revision, endpoint, proxies, etag_timeout, headers, local_files_only, relative_filename, storage_folder)\u001b[0m\n\u001b[1;32m   1721\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1722\u001b[0;31m                 \u001b[0mmetadata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_hf_file_metadata\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mproxies\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mproxies\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0metag_timeout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mheaders\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mheaders\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1723\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mEntryNotFoundError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mhttp_error\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/huggingface_hub/utils/_validators.py\u001b[0m in \u001b[0;36m_inner_fn\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    113\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 114\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    115\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/huggingface_hub/file_download.py\u001b[0m in \u001b[0;36mget_hf_file_metadata\u001b[0;34m(url, token, proxies, timeout, library_name, library_version, user_agent, headers)\u001b[0m\n\u001b[1;32m   1644\u001b[0m     \u001b[0;31m# Retrieve metadata\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1645\u001b[0;31m     r = _request_wrapper(\n\u001b[0m\u001b[1;32m   1646\u001b[0m         \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"HEAD\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/huggingface_hub/file_download.py\u001b[0m in \u001b[0;36m_request_wrapper\u001b[0;34m(method, url, follow_relative_redirects, **params)\u001b[0m\n\u001b[1;32m    371\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfollow_relative_redirects\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 372\u001b[0;31m         response = _request_wrapper(\n\u001b[0m\u001b[1;32m    373\u001b[0m             \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/huggingface_hub/file_download.py\u001b[0m in \u001b[0;36m_request_wrapper\u001b[0;34m(method, url, follow_relative_redirects, **params)\u001b[0m\n\u001b[1;32m    395\u001b[0m     \u001b[0mresponse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_session\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrequest\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0murl\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 396\u001b[0;31m     \u001b[0mhf_raise_for_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresponse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    397\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/huggingface_hub/utils/_errors.py\u001b[0m in \u001b[0;36mhf_raise_for_status\u001b[0;34m(response, endpoint_name)\u001b[0m\n\u001b[1;32m    351\u001b[0m             )\n\u001b[0;32m--> 352\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mRepositoryNotFoundError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmessage\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    353\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mRepositoryNotFoundError\u001b[0m: 401 Client Error. (Request ID: Root=1-665f2bbd-02964b5f1abd0cdb7067f93a;c6abc5f2-69a2-4234-9b72-aa68878c94da)\n\nRepository Not Found for url: https://huggingface.co/google/t5-v1.1-base/resolve/main/config.json.\nPlease make sure you specified the correct `repo_id` and `repo_type`.\nIf you are trying to access a private or gated repo, make sure you are authenticated.\nInvalid username or password.","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mOSError\u001b[0m                                   Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-56b6aff4ff19>\u001b[0m in \u001b[0;36m<cell line: 4>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# Load the pre-trained transformer model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtransformers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mT5ForConditionalGeneration\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfrom_pretrained\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"google/t5-v1.1-base\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;31m# Define the source and target languages\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/transformers/modeling_utils.py\u001b[0m in \u001b[0;36mfrom_pretrained\u001b[0;34m(cls, pretrained_model_name_or_path, config, cache_dir, ignore_mismatched_sizes, force_download, local_files_only, token, revision, use_safetensors, *model_args, **kwargs)\u001b[0m\n\u001b[1;32m   3049\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mconfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mPretrainedConfig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3050\u001b[0m                 \u001b[0;31m# We make a call to the config file first (which may be absent) to get the commit hash as soon as possible\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3051\u001b[0;31m                 resolved_config_file = cached_file(\n\u001b[0m\u001b[1;32m   3052\u001b[0m                     \u001b[0mpretrained_model_name_or_path\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3053\u001b[0m                     \u001b[0mCONFIG_NAME\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/transformers/utils/hub.py\u001b[0m in \u001b[0;36mcached_file\u001b[0;34m(path_or_repo_id, filename, cache_dir, force_download, resume_download, proxies, token, revision, local_files_only, subfolder, repo_type, user_agent, _raise_exceptions_for_gated_repo, _raise_exceptions_for_missing_entries, _raise_exceptions_for_connection_errors, _commit_hash, **deprecated_kwargs)\u001b[0m\n\u001b[1;32m    420\u001b[0m         ) from e\n\u001b[1;32m    421\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mRepositoryNotFoundError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 422\u001b[0;31m         raise EnvironmentError(\n\u001b[0m\u001b[1;32m    423\u001b[0m             \u001b[0;34mf\"{path_or_repo_id} is not a local folder and is not a valid model identifier \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    424\u001b[0m             \u001b[0;34m\"listed on 'https://huggingface.co/models'\\nIf this is a private repository, make sure to pass a token \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mOSError\u001b[0m: google/t5-v1.1-base is not a local folder and is not a valid model identifier listed on 'https://huggingface.co/models'\nIf this is a private repository, make sure to pass a token having permission to this repo either by logging in with `huggingface-cli login` or by passing `token=<your_token>`"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yhG6527N_RkS","executionInfo":{"status":"aborted","timestamp":1717513150217,"user_tz":-330,"elapsed":17,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"outputs":[],"source":["import numpy as np # linear algebra\n","import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n","\n","# Input data files are available in the \"../input/\" directory.\n","# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n","\n","import os\n","import keras\n","import string\n","from string import digits\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","import re\n","\n","import seaborn as sns\n","from sklearn.utils import shuffle\n","from sklearn.model_selection import train_test_split\n","from keras.layers import Input, LSTM, Embedding, Dense\n","from keras.models import Model\n","\n","#print(os.listdir(\"../input\"))\n","\n","pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","pd.set_option('display.max_colwidth', -1)\n","\n","# Any results you write to the current directory are saved as output."]},{"cell_type":"code","source":["lines=pd.read_csv(\"Hindi_English_Truncated_Corpus.csv\",encoding='utf-8')"],"metadata":{"id":"x5TgHL98_xs0","executionInfo":{"status":"aborted","timestamp":1717513150217,"user_tz":-330,"elapsed":17,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["lines['source'].value_counts()"],"metadata":{"id":"ToxZbgT0_xwR","executionInfo":{"status":"aborted","timestamp":1717513150218,"user_tz":-330,"elapsed":17,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["lines=lines[lines['source']=='ted']"],"metadata":{"id":"0vnRRtnk_x6O","executionInfo":{"status":"aborted","timestamp":1717513150218,"user_tz":-330,"elapsed":17,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["lines.head(20)"],"metadata":{"id":"a1KE1MKN_x-R","executionInfo":{"status":"aborted","timestamp":1717513150218,"user_tz":-330,"elapsed":17,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pd.isnull(lines).sum()"],"metadata":{"id":"bIPOnx3O_yAt","executionInfo":{"status":"aborted","timestamp":1717513150218,"user_tz":-330,"elapsed":17,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["lines=lines[~pd.isnull(lines['english_sentence'])]"],"metadata":{"id":"zDvQvUtDBtwP","executionInfo":{"status":"aborted","timestamp":1717513150218,"user_tz":-330,"elapsed":17,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["lines.drop_duplicates(inplace=True)"],"metadata":{"id":"k-Q0g9G3Btyy","executionInfo":{"status":"aborted","timestamp":1717513150218,"user_tz":-330,"elapsed":17,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["lines=lines.sample(n=25000,random_state=42)\n","lines.shape"],"metadata":{"id":"my7SW2QkBt0X","executionInfo":{"status":"aborted","timestamp":1717513150218,"user_tz":-330,"elapsed":17,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Lowercase all characters\n","lines['english_sentence']=lines['english_sentence'].apply(lambda x: x.lower())\n","lines['hindi_sentence']=lines['hindi_sentence'].apply(lambda x: x.lower())"],"metadata":{"id":"379ebY4TBt4X","executionInfo":{"status":"aborted","timestamp":1717513150218,"user_tz":-330,"elapsed":17,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Remove quotes\n","lines['english_sentence']=lines['english_sentence'].apply(lambda x: re.sub(\"'\", '', x))\n","lines['hindi_sentence']=lines['hindi_sentence'].apply(lambda x: re.sub(\"'\", '', x))"],"metadata":{"id":"lPJpiyBdBt6i","executionInfo":{"status":"aborted","timestamp":1717513150219,"user_tz":-330,"elapsed":18,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["exclude = set(string.punctuation) # Set of all special characters\n","# Remove all the special characters\n","lines['english_sentence']=lines['english_sentence'].apply(lambda x: ''.join(ch for ch in x if ch not in exclude))\n","lines['hindi_sentence']=lines['hindi_sentence'].apply(lambda x: ''.join(ch for ch in x if ch not in exclude))"],"metadata":{"id":"qXNWwAVnBt86","executionInfo":{"status":"aborted","timestamp":1717513150219,"user_tz":-330,"elapsed":18,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Remove all numbers from text\n","remove_digits = str.maketrans('', '', digits)\n","lines['english_sentence']=lines['english_sentence'].apply(lambda x: x.translate(remove_digits))\n","lines['hindi_sentence']=lines['hindi_sentence'].apply(lambda x: x.translate(remove_digits))\n","\n","lines['hindi_sentence'] = lines['hindi_sentence'].apply(lambda x: re.sub(\"[२३०८१५७९४६]\", \"\", x))\n","\n","# Remove extra spaces\n","lines['english_sentence']=lines['english_sentence'].apply(lambda x: x.strip())\n","lines['hindi_sentence']=lines['hindi_sentence'].apply(lambda x: x.strip())\n","lines['english_sentence']=lines['english_sentence'].apply(lambda x: re.sub(\" +\", \" \", x))\n","lines['hindi_sentence']=lines['hindi_sentence'].apply(lambda x: re.sub(\" +\", \" \", x))"],"metadata":{"id":"uyWAEt3JBt_t","executionInfo":{"status":"aborted","timestamp":1717513150219,"user_tz":-330,"elapsed":18,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Add start and end tokens to target sequences\n","lines['hindi_sentence'] = lines['hindi_sentence'].apply(lambda x : 'START_ '+ x + ' _END')"],"metadata":{"id":"vjC_ZOQzBuB6","executionInfo":{"status":"aborted","timestamp":1717513150219,"user_tz":-330,"elapsed":18,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["lines.head()"],"metadata":{"id":"tO-h4tpKBuEC","executionInfo":{"status":"aborted","timestamp":1717513150219,"user_tz":-330,"elapsed":18,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["### Get English and Hindi Vocabulary\n","all_eng_words=set()\n","for eng in lines['english_sentence']:\n","    for word in eng.split():\n","        if word not in all_eng_words:\n","            all_eng_words.add(word)\n","\n","all_hindi_words=set()\n","for hin in lines['hindi_sentence']:\n","    for word in hin.split():\n","        if word not in all_hindi_words:\n","            all_hindi_words.add(word)"],"metadata":{"id":"Fj0ztP5VBuHV","executionInfo":{"status":"aborted","timestamp":1717513150219,"user_tz":-330,"elapsed":18,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["len(all_eng_words)"],"metadata":{"id":"wVu1deT__yDw","executionInfo":{"status":"aborted","timestamp":1717513150220,"user_tz":-330,"elapsed":19,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["len(all_hindi_words)"],"metadata":{"id":"sE1SBdcYDGyu","executionInfo":{"status":"aborted","timestamp":1717513150220,"user_tz":-330,"elapsed":18,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["lines['length_eng_sentence']=lines['english_sentence'].apply(lambda x:len(x.split(\" \")))\n","lines['length_hin_sentence']=lines['hindi_sentence'].apply(lambda x:len(x.split(\" \")))"],"metadata":{"id":"J6PHM7QzDHBm","executionInfo":{"status":"aborted","timestamp":1717513150220,"user_tz":-330,"elapsed":18,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["lines.head()"],"metadata":{"id":"lXn-mJ-SDHER","executionInfo":{"status":"aborted","timestamp":1717513150221,"user_tz":-330,"elapsed":19,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["lines[lines['length_eng_sentence']>30].shape"],"metadata":{"id":"PZYR9JhyDHGa","executionInfo":{"status":"aborted","timestamp":1717513150221,"user_tz":-330,"elapsed":19,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["lines=lines[lines['length_eng_sentence']<=20]\n","lines=lines[lines['length_hin_sentence']<=20]"],"metadata":{"id":"QsafI6M4DHJL","executionInfo":{"status":"aborted","timestamp":1717513150221,"user_tz":-330,"elapsed":19,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["lines.shape"],"metadata":{"id":"Wda0soN9DHMk","executionInfo":{"status":"aborted","timestamp":1717513150222,"user_tz":-330,"elapsed":20,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(\"maximum length of Hindi Sentence \",max(lines['length_hin_sentence']))\n","print(\"maximum length of English Sentence \",max(lines['length_eng_sentence']))"],"metadata":{"id":"7LhPBWWDDe5E","executionInfo":{"status":"aborted","timestamp":1717513150222,"user_tz":-330,"elapsed":20,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["max_length_src=max(lines['length_hin_sentence'])\n","max_length_tar=max(lines['length_eng_sentence'])"],"metadata":{"id":"z4ZSLJ2SDe7c","executionInfo":{"status":"aborted","timestamp":1717513150223,"user_tz":-330,"elapsed":21,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["input_words = sorted(list(all_eng_words))\n","target_words = sorted(list(all_hindi_words))\n","num_encoder_tokens = len(all_eng_words)\n","num_decoder_tokens = len(all_hindi_words)\n","num_encoder_tokens, num_decoder_tokens"],"metadata":{"id":"PneBq0NtDe9U","executionInfo":{"status":"aborted","timestamp":1717513150223,"user_tz":-330,"elapsed":21,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["num_decoder_tokens += 1 #for zero padding"],"metadata":{"id":"803KCuhdDfBT","executionInfo":{"status":"aborted","timestamp":1717513150223,"user_tz":-330,"elapsed":21,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["input_token_index = dict([(word, i+1) for i, word in enumerate(input_words)])\n","target_token_index = dict([(word, i+1) for i, word in enumerate(target_words)])"],"metadata":{"id":"ums4rJqnDfDf","executionInfo":{"status":"aborted","timestamp":1717513150223,"user_tz":-330,"elapsed":21,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["reverse_input_char_index = dict((i, word) for word, i in input_token_index.items())\n","reverse_target_char_index = dict((i, word) for word, i in target_token_index.items())"],"metadata":{"id":"JaSNGVMQDfF0","executionInfo":{"status":"aborted","timestamp":1717513150223,"user_tz":-330,"elapsed":21,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["lines = shuffle(lines)\n","lines.head(10)"],"metadata":{"id":"7YBasLqIDfI1","executionInfo":{"status":"aborted","timestamp":1717513150224,"user_tz":-330,"elapsed":22,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X, y = lines['english_sentence'], lines['hindi_sentence']\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2,random_state=42)\n","X_train.shape, X_test.shape"],"metadata":{"id":"3ZOeWvkwDfLW","executionInfo":{"status":"aborted","timestamp":1717513150224,"user_tz":-330,"elapsed":21,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_train.to_pickle('X_train.pkl')\n","X_test.to_pickle('X_test.pkl')"],"metadata":{"id":"OZsyOd0eDfOy","executionInfo":{"status":"aborted","timestamp":1717513150225,"user_tz":-330,"elapsed":22,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def generate_batch(X = X_train, y = y_train, batch_size = 128):\n","    ''' Generate a batch of data '''\n","    while True:\n","        for j in range(0, len(X), batch_size):\n","            encoder_input_data = np.zeros((batch_size, max_length_src),dtype='float32')\n","            decoder_input_data = np.zeros((batch_size, max_length_tar),dtype='float32')\n","            decoder_target_data = np.zeros((batch_size, max_length_tar, num_decoder_tokens),dtype='float32')\n","            for i, (input_text, target_text) in enumerate(zip(X[j:j+batch_size], y[j:j+batch_size])):\n","                for t, word in enumerate(input_text.split()):\n","                    encoder_input_data[i, t] = input_token_index[word] # encoder input seq\n","                for t, word in enumerate(target_text.split()):\n","                    if t<len(target_text.split())-1:\n","                        decoder_input_data[i, t] = target_token_index[word] # decoder input seq\n","                    if t>0:\n","                        # decoder target sequence (one hot encoded)\n","                        # does not include the START_ token\n","                        # Offset by one timestep\n","                        decoder_target_data[i, t - 1, target_token_index[word]] = 1.\n","            yield([encoder_input_data, decoder_input_data], decoder_target_data)"],"metadata":{"id":"oWimNh70DHUx","executionInfo":{"status":"aborted","timestamp":1717513150225,"user_tz":-330,"elapsed":22,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["latent_dim=300"],"metadata":{"id":"ij5N1brQDHYN","executionInfo":{"status":"aborted","timestamp":1717513150226,"user_tz":-330,"elapsed":23,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Encoder\n","encoder_inputs = Input(shape=(None,))\n","enc_emb =  Embedding(num_encoder_tokens, latent_dim, mask_zero = True)(encoder_inputs)\n","encoder_lstm = LSTM(latent_dim, return_state=True)\n","encoder_outputs, state_h, state_c = encoder_lstm(enc_emb)\n","# We discard `encoder_outputs` and only keep the states.\n","encoder_states = [state_h, state_c]"],"metadata":{"id":"OZG2-htZEpH6","executionInfo":{"status":"aborted","timestamp":1717513150226,"user_tz":-330,"elapsed":23,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Set up the decoder, using `encoder_states` as initial state.\n","decoder_inputs = Input(shape=(None,))\n","dec_emb_layer = Embedding(num_decoder_tokens, latent_dim, mask_zero = True)\n","dec_emb = dec_emb_layer(decoder_inputs)\n","# We set up our decoder to return full output sequences,\n","# and to return internal states as well. We don't use the\n","# return states in the training model, but we will use them in inference.\n","decoder_lstm = LSTM(latent_dim, return_sequences=True, return_state=True)\n","decoder_outputs, _, _ = decoder_lstm(dec_emb,\n","                                     initial_state=encoder_states)\n","decoder_dense = Dense(num_decoder_tokens, activation='softmax')\n","decoder_outputs = decoder_dense(decoder_outputs)\n","\n","# Define the model that will turn\n","# `encoder_input_data` & `decoder_input_data` into `decoder_target_data`\n","model = Model([encoder_inputs, decoder_inputs], decoder_outputs)"],"metadata":{"id":"Flv-397_EpKb","executionInfo":{"status":"aborted","timestamp":1717513150226,"user_tz":-330,"elapsed":23,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.compile(optimizer='rmsprop', loss='categorical_crossentropy')"],"metadata":{"id":"BqgiyZjzEpOL","executionInfo":{"status":"aborted","timestamp":1717513150226,"user_tz":-330,"elapsed":23,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.summary()"],"metadata":{"id":"k1A2BIv_EpQz","executionInfo":{"status":"aborted","timestamp":1717513150226,"user_tz":-330,"elapsed":23,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_samples = len(X_train)\n","val_samples = len(X_test)\n","batch_size = 128\n","epochs = 20"],"metadata":{"id":"aVwwvMwDEpT0","executionInfo":{"status":"aborted","timestamp":1717513150226,"user_tz":-330,"elapsed":23,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.fit_generator(generator = generate_batch(X_train, y_train, batch_size = batch_size),\n","                    steps_per_epoch = train_samples//batch_size,\n","                    epochs=epochs,\n","                    validation_data = generate_batch(X_test, y_test, batch_size = batch_size),\n","                    validation_steps = val_samples//batch_size)"],"metadata":{"id":"QIe-XJCQEpWK","executionInfo":{"status":"aborted","timestamp":1717513150226,"user_tz":-330,"elapsed":23,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.save_weights('nmt_weights.h5')"],"metadata":{"id":"dXfLUBRcEpYy","executionInfo":{"status":"aborted","timestamp":1717513150226,"user_tz":-330,"elapsed":23,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Encode the input sequence to get the \"thought vectors\"\n","encoder_model = Model(encoder_inputs, encoder_states)\n","\n","# Decoder setup\n","# Below tensors will hold the states of the previous time step\n","decoder_state_input_h = Input(shape=(latent_dim,))\n","decoder_state_input_c = Input(shape=(latent_dim,))\n","decoder_states_inputs = [decoder_state_input_h, decoder_state_input_c]\n","\n","dec_emb2= dec_emb_layer(decoder_inputs) # Get the embeddings of the decoder sequence\n","\n","# To predict the next word in the sequence, set the initial states to the states from the previous time step\n","decoder_outputs2, state_h2, state_c2 = decoder_lstm(dec_emb2, initial_state=decoder_states_inputs)\n","decoder_states2 = [state_h2, state_c2]\n","decoder_outputs2 = decoder_dense(decoder_outputs2) # A dense softmax layer to generate prob dist. over the target vocabulary\n","\n","# Final decoder model\n","decoder_model = Model(\n","    [decoder_inputs] + decoder_states_inputs,\n","    [decoder_outputs2] + decoder_states2)"],"metadata":{"id":"52otqg-mEpbz","executionInfo":{"status":"aborted","timestamp":1717513150227,"user_tz":-330,"elapsed":24,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def decode_sequence(input_seq):\n","    # Encode the input as state vectors.\n","    states_value = encoder_model.predict(input_seq)\n","    # Generate empty target sequence of length 1.\n","    target_seq = np.zeros((1,1))\n","    # Populate the first character of target sequence with the start character.\n","    target_seq[0, 0] = target_token_index['START_']\n","\n","    # Sampling loop for a batch of sequences\n","    # (to simplify, here we assume a batch of size 1).\n","    stop_condition = False\n","    decoded_sentence = ''\n","    while not stop_condition:\n","        output_tokens, h, c = decoder_model.predict([target_seq] + states_value)\n","\n","        # Sample a token\n","        sampled_token_index = np.argmax(output_tokens[0, -1, :])\n","        sampled_char = reverse_target_char_index[sampled_token_index]\n","        decoded_sentence += ' '+sampled_char\n","\n","        # Exit condition: either hit max length\n","        # or find stop character.\n","        if (sampled_char == '_END' or\n","           len(decoded_sentence) > 50):\n","            stop_condition = True\n","\n","        # Update the target sequence (of length 1).\n","        target_seq = np.zeros((1,1))\n","        target_seq[0, 0] = sampled_token_index\n","\n","        # Update states\n","        states_value = [h, c]\n","\n","    return decoded_sentence"],"metadata":{"id":"apuEmo9yEpeU","executionInfo":{"status":"aborted","timestamp":1717513150227,"user_tz":-330,"elapsed":24,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_gen = generate_batch(X_train, y_train, batch_size = 1)\n","k=-1"],"metadata":{"id":"FDFKl6bDEpgp","executionInfo":{"status":"aborted","timestamp":1717513150227,"user_tz":-330,"elapsed":24,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["k+=1\n","(input_seq, actual_output), _ = next(train_gen)\n","decoded_sentence = decode_sequence(input_seq)\n","print('Input English sentence:', X_train[k:k+1].values[0])\n","print('Actual Hindi Translation:', y_train[k:k+1].values[0][6:-4])\n","print('Predicted Hindi Translation:', decoded_sentence[:-4])"],"metadata":{"id":"-1FP6Q13Epi4","executionInfo":{"status":"aborted","timestamp":1717513150227,"user_tz":-330,"elapsed":24,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":[],"metadata":{"id":"1eHJbThZRp3Z"}},{"cell_type":"code","source":["k+=1\n","(input_seq, actual_output), _ = next(train_gen)\n","decoded_sentence = decode_sequence(input_seq)\n","print('Input English sentence:', X_train[k:k+1].values[0])\n","print('Actual Hindi Translation:', y_train[k:k+1].values[0][6:-4])\n","print('Predicted Hindi Translation:', decoded_sentence[:-4])"],"metadata":{"id":"z8BStzLREpmu","executionInfo":{"status":"aborted","timestamp":1717513150227,"user_tz":-330,"elapsed":24,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["k+=1\n","(input_seq, actual_output), _ = next(train_gen)\n","decoded_sentence = decode_sequence(input_seq)\n","print('Input English sentence:', X_train[k:k+1].values[0])\n","print('Actual Hindi Translation:', y_train[k:k+1].values[0][6:-4])\n","print('Predicted Hindi Translation:', decoded_sentence[:-4])\n"],"metadata":{"id":"eRar8tbjEppz","executionInfo":{"status":"aborted","timestamp":1717513150227,"user_tz":-330,"elapsed":24,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["k+=1\n","(input_seq, actual_output), _ = next(train_gen)\n","decoded_sentence = decode_sequence(input_seq)\n","print('Input English sentence:', X_train[k:k+1].values[0])\n","print('Actual Hindi Translation:', y_train[k:k+1].values[0][6:-4])\n","print('Predicted Hindi Translation:', decoded_sentence[:-4])\n"],"metadata":{"id":"D5IqT_FbEpse","executionInfo":{"status":"aborted","timestamp":1717513150227,"user_tz":-330,"elapsed":24,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["k+=1\n","(input_seq, actual_output), _ = next(train_gen)\n","decoded_sentence = decode_sequence(input_seq)\n","print('Input English sentence:', X_train[k:k+1].values[0])\n","print('Actual Hindi Translation:', y_train[k:k+1].values[0][6:-4])\n","print('Predicted Hindi Translation:', decoded_sentence[:-4])"],"metadata":{"id":"FfgPgOW5EpvR","executionInfo":{"status":"aborted","timestamp":1717513150227,"user_tz":-330,"elapsed":24,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### MANUAL TEXT TRANSLATION"],"metadata":{"id":"Yei7dZWgb_86"}},{"cell_type":"code","source":["!pip install -q googletrans==4.0.0-rc1"],"metadata":{"id":"LmfYM7zwWZmq","executionInfo":{"status":"aborted","timestamp":1717513150227,"user_tz":-330,"elapsed":24,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from googletrans import Translator"],"metadata":{"id":"J9StKzgkWZow","executionInfo":{"status":"aborted","timestamp":1717513150227,"user_tz":-330,"elapsed":24,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["translator = Translator()"],"metadata":{"id":"KJHxi-AvWZq1","executionInfo":{"status":"aborted","timestamp":1717513150227,"user_tz":-330,"elapsed":24,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["english_text = 'Hi, Sir!'\n","translated_text = translator.translate(english_text, src='en', dest='hi')\n","print(translated_text.text)"],"metadata":{"id":"2CPFAVvUWZtS","executionInfo":{"status":"aborted","timestamp":1717513150227,"user_tz":-330,"elapsed":24,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["english_sentences = ['Good evening', 'i am Sumant Bhange', 'thank you!']\n","\n","for sentence in english_sentences:\n","    translated_text = translator.translate(sentence, src='en', dest='hi')\n","    print(translated_text.text)"],"metadata":{"id":"tRFDA5gqWZvz","executionInfo":{"status":"aborted","timestamp":1717513150228,"user_tz":-330,"elapsed":25,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"PoKeUX2sePF6","executionInfo":{"status":"aborted","timestamp":1717513150228,"user_tz":-330,"elapsed":25,"user":{"displayName":"Sumant Bhange","userId":"00962602810848722492"}}},"execution_count":null,"outputs":[]}]}